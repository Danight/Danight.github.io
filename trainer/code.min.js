(function () { window.lazy = function (b, c, ...d) { let e = document.createElement(b); for (let f in c) e.hasOwnProperty(f) || e.setAttribute(f, c[f]); for (let f of d) 'string' == typeof f && (f = document.createTextNode(f)), e.append(f); return e } })(); (function () { window.Sound = class { static play(b, c = 300) { const d = lazy('audio', { class: 'sound', autoplay: !0 }, lazy('source', { src: b })); document.body.append(d), setTimeout(() => d.remove(), c) } } })(); (function () { window.Timer = class { constructor(b) { this.elem = lazy('div', { class: 'timer' }), this._display = lazy('div', { class: 'timer__display' }, lazy('div', { class: 'timer__minutes timer__item' }, lazy('div', { class: 'timer__value' }, '00'), lazy('div', { class: 'timer__unit' }, 'min')), lazy('div', { class: 'timer__seconds timer__item' }, lazy('div', { class: 'timer__value' }, '00'), lazy('div', { class: 'timer__unit' }, 'sec')), lazy('div', { class: 'timer__milliseconds timer__item' }, lazy('div', { class: 'timer__value' }, '00'), lazy('div', { class: 'timer__unit' }, 'ms'))), this.elem.append(this._display), this.elem.addEventListener('click', this._handleClick.bind(this)), this.set(b) }; set(b = {}) { const { duration: d = 2e3, interim: c } = b; this._rollback = b, this._interim = c, this._interimBuffer = {}, this._isSheduled = !1, this._currentTime = d, this._duration = d, this._render() }; _toggleShedule() { this.elem.querySelector('.timer__toggle-shedule').classList.toggle('timer__toggle-shedule_play') }; _handleClick(b) { const c = b.target.closest('.timer__toggle-shedule'); c && b.currentTarget.contains(c) && (this.isShedule() ? (this.stop(), this._toggleShedule()) : this.start()) }; _render() { this._pattern || (this._pattern = this.elem.querySelectorAll('.timer__value')); const { _pattern: b, _currentTime: c, _interim: d, _interimBuffer: f, _duration: g } = this; let h = [c / 1e3 / 60 % 60, c / 1e3 % 60, c % 100]; if (h = h.map(l => Math.floor(l)), h.forEach((l, m) => { b[m].textContent = ('0' + l).slice(-2) }), !!this._isSheduled) { this._currentTime -= 3.9; const j = 0 === h[1] || h[1] + 1 === g / 1e3, k = 0 == h[1] % Math.floor((g - 1e3) / (1e3 * d)); !j && !f[h[1]] && d && k && (this._interimBuffer[Math.floor(h[1])] = !0, this._dispatchEvent('interim')), 0 > this._currentTime && this._complete() } }; isShedule() { return !!this._timerId }; _dispatchEvent(b) { const c = new CustomEvent(b, { bubbles: !0, cancelable: !0 }); this.elem.dispatchEvent(c) }; _prepare() { this._controlPanel || (this._controlPanel = lazy('div', { class: 'timer__control-panel' }, lazy('button', { class: 'timer__toggle-shedule clear-default' })), this.elem.append(this._controlPanel)) }; _complete() { this._dispatchEvent('complete'), this._controlPanel.remove(), this._controlPanel = null, this.stop(), this.set(this._rollback) }; shedule() { this._prepare(), this.set(this._rollback), this._isSheduled = !0, this._dispatchEvent('shedule'), this.start() }; start() { this._timerId || (this._toggleShedule(), this._timerId = setInterval(this._render.bind(this), 0)) }; stop() { clearInterval(this._timerId), this._timerId = null } } })(); (function () { window.Plank = class { constructor() { this._setted = 5, this._isSheduled = !1, this._timer = new Timer({ duration: 1e3 * this._setted }), this.elem = lazy('div', { class: 'plank-mode trainer__mode-item trainer__plank-mode' }), this.elem.addEventListener('shedule', () => { Sound.play(SOUND_MODES.shedule, 300), this._isSheduled = !0 }), this.elem.addEventListener('complete', () => { Sound.play(SOUND_MODES.complete, 1e3), this._isSheduled = !1 }), this._config = lazy('form', { class: 'plank-mode__config trainer__config' }, lazy('fieldset', { class: 'plank-mode__fieldset trainer__fieldset' }, lazy('legend', { class: 'plank-mode__legend trainer__legend' }, 'Set duration'), lazy('input', { class: 'clear-default plank-mode__set-duration plank-mode__input trainer__input', name: 'set-duration', type: 'number', min: '0', value: '5', step: '5', autofocus: !0 })), lazy('fieldset', { class: 'plank-mode__fieldset trainer__fieldset' }, lazy('legend', { class: 'plank-mode__legend trainer__legend' }, 'Choose duration'), lazy('select', { class: 'clear-default plank-mode__choose-duration plank-mode__select trainer__select', name: 'choose-duration' }, lazy('option', { class: 'plank-mode__option', value: '0' }, 'none'), lazy('option', { class: 'plank-mode__option', value: '30' }, '30 seconds'), lazy('option', { class: 'plank-mode__option', value: '60' }, '1 minutes'), lazy('option', { class: 'plank-mode__option', value: '90' }, '1.5 minutes'), lazy('option', { class: 'plank-mode__option', value: '120' }, '2 minutes'))), lazy('fieldset', { class: 'plank-mode__fieldset trainer__fieldset' }, lazy('button', { class: 'plank-mode__shedule clear-default trainer__shedule', type: 'submit', name: 'shedule' }, 'shedule'))), this._displayTimer = lazy('div', { class: 'plank-mode__display-timer trainer__display-timer' }, this._timer.elem), this.elem.append(this._config, this._displayTimer), this._config['set-duration'].addEventListener('change', this._handleSetDuration.bind(this)), this._config['choose-duration'].addEventListener('change', this._handleChooseDuration.bind(this)), this._config.addEventListener('submit', this._handleSubmit.bind(this)) }; _handleSetDuration(b) { this._isSheduled || (this._setted = 1e3 * b.target.value.trim() || 0, this._timer.set({ duration: this._setted })) }; _handleChooseDuration(b) { this._setted || this._isSheduled || (this._chosen = 1e3 * b.target.value || 0, this._timer.set({ duration: this._chosen })) }; _validate() { return this._setted || this._chosen }; _handleSubmit(b) { b.preventDefault(); let c = this._validate(); return c ? void this._timer.shedule() : void alert('Incorrect data. ') } } })(); (function () { window.PushUp = class { constructor() { this._repetitions = 2, this._setted = 4, this._isSheduled = !1, this._timer = new Timer({ duration: 1e3 * this._setted, interim: this._repetitions }), this.elem = lazy('div', { class: 'push-up-mode trainer__mode-item trainer__push-up-mode' }), this.elem.addEventListener('shedule', () => { Sound.play(SOUND_MODES.shedule, 300), this._isSheduled = !0 }), this.elem.addEventListener('interim', () => Sound.play(SOUND_MODES.shedule, 300)), this.elem.addEventListener('complete', () => { Sound.play(SOUND_MODES.complete, 1e3), this._isSheduled = !1 }), this._config = lazy('form', { class: 'push-up-mode__config trainer__config' }, lazy('fieldset', { class: 'push-up-mode__fieldset trainer__fieldset' }, lazy('legend', { class: 'push-up-mode__legend trainer__legend' }, 'Repetitions number'), lazy('input', { class: 'push-up-mode__set-repetitions-number clear-default push-up-mode__input trainer__input', type: 'number', name: 'set-repetitions-number', min: '2', value: '2', step: '2', autofocus: !0 })), lazy('fieldset', { class: 'push-up-mode__fieldset trainer__fieldset' }, lazy('legend', { class: 'push-up-mode__legend trainer__legend' }, 'Set duration'), lazy('input', { class: 'push-up-mode__set-duration clear-default push-up-mode__input trainer__input', type: 'number', name: 'set-duration', min: '0', value: '4', step: '2' })), lazy('fieldset', { class: 'push-up-mode__fieldset trainer__fieldset' }, lazy('legend', { class: 'push-up-mode__legend trainer__legend' }, 'Choose duration'), lazy('select', { class: 'push-up-mode__choose-duration clear-default push-up-mode__select trainer__select', name: 'choose-duration' }, lazy('option', { class: 'push-up-mode__option', value: '0' }, 'none'), lazy('option', { class: 'push-up-mode__option', value: '30' }, '30 seconds'), lazy('option', { class: 'push-up-mode__option', value: '60' }, '1 minute'), lazy('option', { class: 'push-up-mode__option', value: '90' }, '1.5 minute'), lazy('option', { class: 'push-up-mode__option', value: '120' }, '2 minutes'))), lazy('fieldset', { class: 'push-up-mode__fieldset trainer__fieldset' }, lazy('button', { class: 'push-up-mode__shedule clear-default trainer__shedule', type: 'submit', name: 'shedule' }, 'shedule'))), this._displayTimer = lazy('div', { class: 'push-up-mode__display-timer trainer__display-timer' }, this._timer.elem), this.elem.append(this._config, this._displayTimer), this._config['set-repetitions-number'].addEventListener('change', this._handleSetRepetitionsNumber.bind(this)), this._config['set-duration'].addEventListener('change', this._handleSetDuration.bind(this)), this._config['choose-duration'].addEventListener('change', this._handleChooseDuration.bind(this)), this._config.addEventListener('submit', this._handleSubmit.bind(this)) }; _handleSetRepetitionsNumber(b) { this._isSheduled || (this._repetitions = b.target.value.trim() || 0, this._timer.set({ interim: this._repetitions, duration: 1e3 * this._validate() })) }; _handleSetDuration(b) { this._isSheduled || (this._setted = b.target.value.trim() || 0, this._timer.set({ duration: 1e3 * this._setted })) }; _handleChooseDuration(b) { this._setted || this._isSheduled || (this._chosen = b.target.value || 0, this._timer.set({ duration: 1e3 * this._chosen })) }; _validate() { return this._repetitions ? this._setted || this._chosen : void 0 }; _handleSubmit(b) { b.preventDefault(); const c = this._validate(); return c ? void this._timer.shedule() : void alert('Incorrect data.') } } })(); (function () { window.SOUND_MODES = { shedule: 'https://raw.githubusercontent.com/danight/danight.github.io/master/trainer/sounds/shedule.wav', complete: 'https://raw.githubusercontent.com/danight/danight.github.io/master/trainer/sounds/complete.wav' } })(); (function () { const a = { Plank, PushUp }; window.TRAINER_MODES = a })(); (function () { window.Trainer = class { constructor({ wrapper: b = document.body }) { this._wrapper = b, b.addEventListener('click', this._handleClick.bind(this)) }; _handleClick(b) { const c = b.target.closest('button'); if (c && b.currentTarget.contains(c)) { if (c.classList.contains('trainer__back-refer')) return this.render(), void this._mode._timer.stop(); const d = c.dataset.actionMode; d && (this._wrapper.querySelector('.trainer__back-refer').classList.remove('trainer__back-refer_hide'), this._wrapper.querySelector('.trainer__headline').classList.add('trainer__headline_hide'), this._modeDisplay.innerHTML = '', this._mode = new TRAINER_MODES[d], this._modeDisplay.append(this._mode.elem)) } } render() { this._wrapper.innerHTML = '', this._wrapper.append(lazy('h1', { class: 'trainer__headline' }, 'Choose training mode:'), lazy('button', { class: 'trainer__btn clear-default trainer__back-refer trainer__back-refer_hide' })), this._modeDisplay = this._wrapper.appendChild(lazy('div', { class: 'trainer__mode-display' }, lazy('button', { class: 'trainer__mode-btn clear-default trainer__plank-btn', ['data-action-mode']: 'Plank' }, 'plank'), lazy('button', { class: 'trainer__mode-btn clear-default trainer__push-btn', ['data-action-mode']: 'PushUp' }, 'push up'))) } } })();
